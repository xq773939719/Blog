<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>移动端学习网站</title>
      <link href="/posts/16.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/posts/16.%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Native原生"><a href="#1-Native原生" class="headerlink" title="1.Native原生"></a>1.Native原生</h1><p><a href="https://developer.android.com/">Android</a><br><a href="https://developer.apple.com/cn/">iOS</a><br><a href="https://www.cnswift.org/">Swift</a></p><h1 id="2-跨平台"><a href="#2-跨平台" class="headerlink" title="2.跨平台"></a>2.跨平台</h1><p><a href="https://flutter.cn/">Flutter</a><br><a href="https://reactnative.cn/">React Native</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目学习网站</title>
      <link href="/posts/15.%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/posts/15.%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hellogithub.com/">分享 GitHub 上 有趣、入门级的开源项目</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习网站</title>
      <link href="/posts/13.%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/posts/13.%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://zh.javascript.info/">现代 JavaScript 教程</a><br><a href="https://cn.vuejs.org/">Vue.js</a><br><a href="https://zh-hans.reactjs.org/">React.js</a><br><a href="https://lucifer.ren/fe-interview/#/">大前端面试宝典 - 图解前端</a><br><a href="https://lucifer.ren/automate-everything/#/">我的第一本书</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法学习网站</title>
      <link href="/posts/14.%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/posts/14.%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.cxyxiaowu.com/">五分钟学算法</a><br><a href="https://labuladong.gitbook.io/algo/">算法小抄</a><br><a href="https://algorithm-visualizer.org/">algorithm-visualizer</a><br><a href="https://visualgo.net/zh">VisuAlgo</a><br><a href="https://www.geekxh.com/">小浩算法</a><br><a href="https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/">力扣加加</a><br><a href="https://www.acwing.com/">Acwing</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>后端学习网站</title>
      <link href="/posts/12.%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/posts/12.%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Java技术栈"><a href="#1-Java技术栈" class="headerlink" title="1.Java技术栈"></a>1.Java技术栈</h1><p><a href="https://www.pdai.tech/">Java 全栈知识体系</a><br><a href="http://www.cyc2018.xyz/">CycNote</a><br><a href="https://github.com/Snailclimb/JavaGuide">JavaGuide</a></p><h1 id="2-C-技术栈"><a href="#2-C-技术栈" class="headerlink" title="2.C++技术栈"></a>2.C++技术栈</h1><p><a href="https://light-city.club/sc/">C++那些事</a></p><h1 id="3-Python"><a href="#3-Python" class="headerlink" title="3.Python"></a>3.Python</h1><p><a href="http://www.pythondoc.com/">Python中文学习大本营</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NPM与Yarn源管理工具</title>
      <link href="/posts/11.NPM%E4%B8%8EYarn%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/posts/11.NPM%E4%B8%8EYarn%E6%BA%90%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-NRM"><a href="#1-NRM" class="headerlink" title="1.NRM"></a>1.NRM</h1><pre><code>npm install -g nrmnrm lsnrm use taobaonrm test</code></pre><h1 id="2-YRM"><a href="#2-YRM" class="headerlink" title="2.YRM"></a>2.YRM</h1><pre><code>install -g yrmyrm lsyrm use taobaoyrm test</code></pre><h1 id="3-CGR"><a href="#3-CGR" class="headerlink" title="3.CGR"></a>3.CGR</h1><pre><code>npm install -g cgr</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《如何自学Android》有感</title>
      <link href="/posts/10.%E8%AF%BB%E3%80%8A%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6Android%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/posts/10.%E8%AF%BB%E3%80%8A%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6Android%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Read the fucking source code</code></p><h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h1><ul><li>Java基础 《Java编程思想》，《Effective Java》，《Java并发编程实战》，《Java性能优化权威指南》，《Java虚拟机》</li><li>Android基础 </li></ul><h1 id="2-进阶"><a href="#2-进阶" class="headerlink" title="2.进阶"></a>2.进阶</h1><ul><li>阅读源码：</li><li>阅读博客</li><li>阅读书籍</li></ul><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h1><ul><li>好奇心</li><li>知识点的整理总结</li><li>天道酬勤</li><li>自己解决&gt;求助他人</li><li>静下心来+持之以恒+专研</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="#参考"></a>#参考</h1><p><a href="https://zhuanlan.zhihu.com/p/20708611">如何自学Android</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发知识集合</title>
      <link href="/posts/9.iOS%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/"/>
      <url>/posts/9.iOS%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Runtime四部曲"><a href="#1-Runtime四部曲" class="headerlink" title="1.Runtime四部曲"></a>1.Runtime四部曲</h1><p><a href="https://juejin.im/post/6844903878794706957">iOS 开发：『Runtime』详解（一）基础知识</a><br><a href="https://juejin.im/post/6844903888122822669"> iOS 开发：『Runtime』详解（二）Method Swizzling</a><br><a href="https://juejin.im/post/6844903896708562952">iOS 开发：『Runtime』详解（三）Category 底层原理</a><br><a href="https://juejin.im/post/6844903903939526669">iOS 开发：『Runtime』详解（四）获取类详细属性、方法</a></p><h1 id="2-iOS探索系列"><a href="#2-iOS探索系列" class="headerlink" title="2.iOS探索系列"></a>2.iOS探索系列</h1><p><a href="https://juejin.im/post/6857758064658153486">iOS探索 内存管理篇</a></p><h1 id="3-《Effective-Objective-C》干货三部曲"><a href="#3-《Effective-Objective-C》干货三部曲" class="headerlink" title="3.《Effective Objective-C》干货三部曲"></a>3.《Effective Objective-C》干货三部曲</h1><p><a href="https://juejin.im/post/6844903545636913159">概念篇</a><br><a href="https://juejin.im/post/6844903548942024717">规范篇</a><br><a href="https://juejin.im/post/6844903549780885511">技巧篇</a></p><h1 id="4-《Objective-C-高级编程》干货三部曲"><a href="#4-《Objective-C-高级编程》干货三部曲" class="headerlink" title="4.《Objective-C 高级编程》干货三部曲"></a>4.《Objective-C 高级编程》干货三部曲</h1><p><a href="https://juejin.im/post/6844903473272586254">引用计数篇 </a><br><a href="https://juejin.im/post/6844903474312773646">Blocks篇</a><br><a href="https://juejin.im/post/6844903475378159623">GCD篇</a></p><h1 id="5-『Blocks』详尽总结"><a href="#5-『Blocks』详尽总结" class="headerlink" title="5.『Blocks』详尽总结"></a>5.『Blocks』详尽总结</h1><p><a href="https://juejin.im/post/6844903874118025229">基本使用</a><br><a href="https://juejin.im/post/6844903875795779591">底层原理</a></p><h1 id="6-Runloop"><a href="#6-Runloop" class="headerlink" title="6.Runloop"></a>6.Runloop</h1><p><a href="https://juejin.im/post/6844903592369848328">RunLoop 源码阅读</a><br><a href="https://juejin.im/post/6844903604965523464">iOS底层原理探究-Runloop</a><br><a href="https://juejin.im/post/6844903598350925831">iOS底层原理总结 - RunLoop</a></p><h1 id="7-iOS-开发：『Crash-防护系统』"><a href="#7-iOS-开发：『Crash-防护系统』" class="headerlink" title="7.iOS 开发：『Crash 防护系统』"></a>7.iOS 开发：『Crash 防护系统』</h1><p><a href="https://juejin.im/post/6844903922667094023">Unrecognized Selector </a><br><a href="https://juejin.im/post/6844903927469588488">KVO 防护</a><br><a href="https://juejin.im/post/6844903934662803464">KVC 防护</a><br><a href="https://juejin.im/post/6874435201632583694">iOS Crash防护</a><br><a href="https://juejin.im/post/6873868181635760142">一文读懂崩溃原理</a></p><h1 id="8-多线程"><a href="#8-多线程" class="headerlink" title="8.多线程"></a>8.多线程</h1><p><a href="https://juejin.im/post/6844903566398717960">iOS多线程：『GCD』详尽总结</a><br><a href="https://juejin.im/post/6844903556009443335">iOS多线程：『pthread、NSThread』详尽总结</a><br><a href="https://juejin.im/post/6844903570467192845">iOS多线程：『NSOperation、NSOperationQueue』详尽总结</a></p><h1 id="9-网络"><a href="#9-网络" class="headerlink" title="9.网络"></a>9.网络</h1><p><a href="https://juejin.im/post/6844903636137410574">iOS开发·网络请求大总结</a></p><h1 id="10-锁"><a href="#10-锁" class="headerlink" title="10.锁"></a>10.锁</h1><p><a href="https://juejin.im/post/6844904143157460999">iOS各种锁总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度探索C++对象模型</title>
      <link href="/posts/8.%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
      <url>/posts/8.%E6%B7%B1%E5%BA%A6%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://wangpengcheng.github.io/2019/11/28/cplusplus_object_model/">深度探索C++对象模型</a><br><a href="https://www.jianshu.com/p/620448dcc81a">深入探索C++对象模型</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>收藏夹</title>
      <link href="/posts/7.%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>/posts/7.%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-新的"><a href="#1-新的" class="headerlink" title="1.新的"></a>1.新的</h1><h2 id="1-掘金"><a href="#1-掘金" class="headerlink" title="1.掘金"></a>1.掘金</h2><p><a href="https://juejin.im/user/3562073402387006/posts">J_Knight_</a><br><a href="https://juejin.im/user/2488950054725101/posts">行走少年郎</a><br><a href="https://juejin.im/user/2225067267985704">FengyunSky</a></p><h2 id="2-简书"><a href="#2-简书" class="headerlink" title="2.简书"></a>2.简书</h2><p><a href="https://www.jianshu.com/u/a34dc804b875">chilim</a></p><h2 id="3-独立博客"><a href="#3-独立博客" class="headerlink" title="3.独立博客"></a>3.独立博客</h2><p><a href="https://blog.devtang.com/">唐巧</a><br><a href="http://gityuan.com/">Gityuan</a><br><a href="https://www.smslit.top/">SMSLIT</a><br><a href="https://halfrost.com/">halfrost</a><br><a href="https://blog.ibireme.com/">ibireme</a><br><a href="https://blog.imalan.cn/">imalan</a><br><a href="https://kingcos.me/">萌面大道</a><br><a href="https://light-city.club/sc/">C++那些事</a><br><a href="https://robinchao.github.io/">Robin</a><br><a href="https://get233.com/">Hran</a><br><a href="http://billchan.me/">陈明标</a><br><a href="https://androidperformance.com/">Gracker</a><br><a href="https://www.cnblogs.com/54chensongxia/">程序员自由之路</a><br><a href="https://imtx.me/">图拉鼎</a><br><a href="https://regulus.cc/">Regulus</a><br><a href="https://yiwei.dev/">Yiwei Gong</a><br><a href="https://vince-amazing.com/">曹文斯</a><br><a href="http://gityuan.com/">袁辉辉</a><br><a href="https://www.sgyzyun.club/">洛尘曦</a><br><a href="https://lucifer.ren/blog/">脑洞前端</a><br><a href="https://liuwangshu.cn/">刘望舒</a></p><h2 id="4-Github"><a href="#4-Github" class="headerlink" title="4.Github"></a>4.Github</h2><p><a href="https://github.com/iOShuyang/Book-Recommended-Interview">iOS日常积累所看到的面试题集锦</a><br><a href="https://github.com/liberalisman/iOS-InterviewQuestion-collection">iOS-InterviewQuestion-collection</a><br><a href="https://github.com/SunshineBrother/JHBlog">JHBlog</a><br><a href="https://github.com/hehonghui/the-economist-ebooks">经济学人、纽约客杂志</a></p><h1 id="2-旧的"><a href="#2-旧的" class="headerlink" title="2.旧的"></a>2.旧的</h1><p><a href="https://main.xq99.me/">我维护的收藏夹</a></p><p>“一知半解”是一件危险的事情。<br><a href="https://juejin.im/post/5cc1da82f265da036023b628?utm_source=gold_browser_extension">一名【合格】前端工程师的自检清单</a></p><h3 id="2019-05-22"><a href="#2019-05-22" class="headerlink" title="2019.05.22"></a>2019.05.22</h3><p><a href="https://ikookblog.com/">关于谷歌云的Blog</a><br><a href="https://51.ruyo.net/9807.html">工具类网站</a><br><a href="https://dalao.ru/">大佬-不错的导航站</a><br><a href="http://dianying.fm/discovery/tess-of-the-d-39-urbervilles/">电影</a><br><a href="https://www.mingdan.top/">名单-资源站</a><br><a href="https://h5player.bytedance.com/generate/">西瓜播放器</a><br><a href="https://tu.acgbox.top/">ACG盒子-图源</a><br><a href="https://otp.landian.vip/zh-cn/">OfficeTools-工具</a><br><a href="https://www.behance.net/">Behance-设计展示网站</a><br><a href="https://wn.run/cn/">万能命令-在线效率工具平台</a><br><a href="https://blog.daliansky.net/">黑果小兵-Blog</a></p><h3 id="2019-05-17"><a href="#2019-05-17" class="headerlink" title="2019.05.17"></a>2019.05.17</h3><p><a href="https://www.allhistory.com/">全历史</a></p><h3 id="2019-05-14"><a href="#2019-05-14" class="headerlink" title="2019.05.14"></a>2019.05.14</h3><p><a href="https://tools.guardui.net/">GuiTools</a><br><a href="https://www.sojson.com/">SoJson在线</a></p><h3 id="2019-05-11"><a href="#2019-05-11" class="headerlink" title="2019.05.11"></a>2019.05.11</h3><p><a href="https://www.grabient.com/">Grabient-渐变色制作</a><br><a href="https://hitup.wondertools.top/">Github趋势</a><br><a href="http://devopen.club/">*分享软件开发视频</a></p><h3 id="2019-05-10"><a href="#2019-05-10" class="headerlink" title="2019.05.10"></a>2019.05.10</h3><p><a href="http://v1.iviewui.com/">*iView-UI框架</a><br><a href="https://element.eleme.cn/#/zh-CN">*Elements-UI框架</a></p><h3 id="2019-05-08"><a href="#2019-05-08" class="headerlink" title="2019.05.08"></a>2019.05.08</h3><p><a href="https://www.cnblogs.com/keepfool/">*Vue分享博客-Blog</a><br><a href="http://wenku.baiduvvv.com/doc/">VVV文档在线导出工具-工具</a><br><a href="https://blogs.niceboybao.com/">*资源-Blog</a><br><a href="http://blog.parryqiu.com/">*好记性不如烂键盘-教程-Blog</a></p><h3 id="2019-05-07"><a href="#2019-05-07" class="headerlink" title="2019.05.07"></a>2019.05.07</h3><p><a href="https://www.awesomes.cn/">*Awesomes</a></p><h3 id="2019-05-04"><a href="#2019-05-04" class="headerlink" title="2019.05.04"></a>2019.05.04</h3><p><a href="https://github.com/wangdoc">wangdoc</a><br><del><a href="http://impatient-js.apachecn.org/#/docs/">写给不耐烦程序员的JavaScript</a></del><br><a href="https://juejin.im/post/5cb534386fb9a0685727e1eb">*超全的设计模式简介（45种）</a></p><h3 id="2019-05-03"><a href="#2019-05-03" class="headerlink" title="2019.05.03"></a>2019.05.03</h3><p><a href="https://javaee.strivebo.com/">Java后端升级打怪</a><br><a href="https://www.rowkey.me/blog/2016/06/27/java-backend-study/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io">后端技术杂谈</a><br><a href="https://segmentfault.com/a/1190000014933213">Java 学习路线之四个阶段</a><br><a href="https://juejin.im/entry/5a7a9a13f265da4e865a578c">Java 后端自学之路</a><br><a href="https://www.rowkey.me/">飒然HangBlog</a></p><h3 id="2019-05-01"><a href="#2019-05-01" class="headerlink" title="2019.05.01"></a>2019.05.01</h3><p><a href="https://githuber.cn/search?language=JavaScript">Githuber</a><br><a href="https://github.com/orsanawwad/awesome-roadmaps">Github</a><br><a href="https://miku.tools/">MikuTools</a><br><a href="http://idea.lanyus.com/">IDEA</a><br><a href="http://www.xzpc6.com/">资源</a><br><a href="http://www.olecn.com/">资源</a></p><h3 id="2019-04-29"><a href="#2019-04-29" class="headerlink" title="2019.04.29"></a>2019.04.29</h3><p><a href="https://www.jianshu.com/u/c7a11d79d777">杰瑞米大魔王-Ghost文章</a><br><a href="https://my.oschina.net/letiantian/blog/633055">Ghost博客主题制作简明教程</a><br><a href="http://www.webhek.com/">Web骇客Blog</a><br><a href="https://www.dandyweng.com/">翁天信Blog</a><br><a href="https://luolei.org/">罗磊Blog</a></p><h3 id="2019-03-2019-04"><a href="#2019-03-2019-04" class="headerlink" title="2019.03-2019.04"></a>2019.03-2019.04</h3><p><a href="https://zh-hans.reactjs.org/" title="React">React</a><br><a href="http://www.bootcss.com/" title="BootStrap">BootStrap</a><br><a href="https://www.gulpjs.com.cn/" title="Gulp">Gulp</a><br><a href="https://webpack.docschina.org/" title="Webpack">Webpack</a><br><a href="https://www.sass.hk/" title="Sass">Sass</a><br><a href="http://www.bootcss.com/p/lesscss/" title="Less">Less</a><br><a href="https://github.com/yangchong211/YCBlogs" title="YCBlogs">YCBlogs</a><br><a href="https://segmentfault.com/a/1190000016337325" title="JavaScript">JavaScript</a><br><a href="https://xoihazard.com/tools/halftone/">Vector Halftone Maker</a><br><a href="http://www.easycolor.cc/">EasyColor</a><br><a href="https://css-doodle.com/">css-doodle</a><br><a href="https://opensource.apple.com/">opensource apple</a><br><a href="https://github.com/freebsd/freebsd">freebsd</a><br><a href="https://github.com/apple/darwin-xnu">darwin-xnu</a><br><a href="https://opensource.apple.com/source/">opensource apple/source</a><br><a href="http://www.1zlab.com/">1Z实验室</a><br><a href="https://lib-pku.github.io/">清华课程</a><br><a href="https://minhaskamal.github.io/DownGit/#/home">downgit</a><br><a href="https://github.com/Louiszhai/tool">Mac生产力工具链推荐</a><br><a href="https://zhuanlan.zhihu.com/p/25443704">值得推荐的C/C++框架和库</a><br><a href="https://wangdoc.com/javascript/">JavaScript 教程</a><br><a href="http://wiki.jikexueyuan.com/">极客学院</a><br><a href="https://segmentfault.com/a/1190000016337325">JavaScript 初学者教程（指南）</a><br><a href="https://www.cnblogs.com/qianguyihao/p/10701923.html">2019年Web前端最新导航（常见前端框架、前端大牛）</a><br><a href="http://www.raychase.net/allarticle">四火Blog</a><br><a href="http://reborncodinglife.com/">李松松Blog</a><br><a href="http://wrran.com/blog/2017/02/27/cheatsheet/dev/open-lib-in-c/">C/C++ 常用开源库</a><br><a href="https://coolshell.cn/">酷壳Blog</a><br><a href="https://mp.weixin.qq.com/s/LJB7fad7lbMQtHd6YPJ8vg">书单</a><br><a href="https://yangyangwithgnu.github.io/">yangyangwithgnu Blog</a><br><a href="https://www.otkz.com/">宅区</a><br><a href="https://blog.linesh.tw/#/">Linesh Blog</a><br><a href="https://wdxtub.com/2016/03/30/tmux-guide/">Tmux</a><br><a href="https://xiaozhou.net/learn-the-command-line-tmux-2018-04-27.html">Tmux</a><br><a href="http://louiszhai.github.io/2017/09/30/tmux/">Tmux</a><br><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7">Tmux</a><br><a href="https://likexia.gitee.io/game/index.html">Github Game</a></p><h3 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h3><p><a href="https://www.tinymind.cn/articles/3759">算法和编程面试题精选TOP50！(附代码+解题思路+答案)</a><br><a href="https://juejin.im/post/5a9fcc5e51882555602074e3">localstorage 必知必会</a><br><a href="https://juejin.im/post/5ca2e1935188254416288eb2?utm_source=gold_browser_extension">ES6、ES7、ES8、ES9、ES10新特性一览</a><br><a href="https://juejin.im/entry/5af2557c6fb9a07aa83eb59c">2018年最新Java面试题及答案整理(持续完善中…)</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红黑树的实现</title>
      <link href="/posts/6.%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/posts/6.%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"main.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RBT <span class="token operator">*</span>rbt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RBT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> temp<span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">RBTNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">preOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">inOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">postOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">levelOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">erase</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">preOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">inOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">postOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">levelOrder</span><span class="token punctuation">(</span>rbt<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> rbt<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by XQ on 2020/4/29.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"RBTNode.h"</span></span>RBTNode<span class="token operator">::</span><span class="token function">RBTNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode<span class="token operator">::</span><span class="token function">RBTNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode<span class="token operator">::</span><span class="token function">RBTNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> RBTNode <span class="token operator">*</span>parent<span class="token punctuation">,</span> RBTNode <span class="token operator">*</span>left<span class="token punctuation">,</span> RBTNode <span class="token operator">*</span>right<span class="token punctuation">,</span> string color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode<span class="token operator">::</span><span class="token operator">~</span><span class="token function">RBTNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> RBTNode<span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBTNode<span class="token operator">::</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBTNode<span class="token operator">::</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBTNode<span class="token operator">::</span><span class="token function">setParent</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBTNode<span class="token operator">::</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBTNode<span class="token operator">::</span><span class="token function">setLeft</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBTNode<span class="token operator">::</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBTNode<span class="token operator">::</span><span class="token function">setRight</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>string RBTNode<span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBTNode<span class="token operator">::</span><span class="token function">setColor</span><span class="token punctuation">(</span>string color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by XQ on 2020/4/29.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"RBT.h"</span></span>RBT<span class="token operator">::</span><span class="token function">RBT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBT<span class="token operator">::</span><span class="token function">RBT</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBT<span class="token operator">::</span><span class="token operator">~</span><span class="token function">RBT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~RBT"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">collectNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBT<span class="token operator">::</span><span class="token function">findSuccessor</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>ch <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ch <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">rotateLeft</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>r <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3</span>        r<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6</span>        r<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">rotateRight</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>l <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3</span>        l<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> root <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">fixAfterAdd</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">&amp;&amp;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>father <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>grandfather <span class="token operator">=</span> father<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>father <span class="token operator">==</span> grandfather<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RBTNode <span class="token operator">*</span>uncle <span class="token operator">=</span> grandfather<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uncle <span class="token operator">&amp;&amp;</span> uncle<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                father<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                uncle<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grandfather<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> grandfather<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> father<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node <span class="token operator">=</span> father<span class="token punctuation">;</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RBTNode <span class="token operator">*</span>uncle <span class="token operator">=</span> grandfather<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uncle <span class="token operator">&amp;&amp;</span> uncle<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                father<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                uncle<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grandfather<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> grandfather<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> father<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node <span class="token operator">=</span> father<span class="token punctuation">;</span>                    <span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">fixAfterErase</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RBTNode <span class="token operator">*</span> flag <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于node指向有变化 标记一下 调整好后删除</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">&amp;&amp;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RBTNode <span class="token operator">*</span>sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> flag <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token operator">&amp;&amp;</span>                       sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 兄弟都为黑节点，需要找父母帮忙</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">||</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateRight</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateLeft</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RBTNode <span class="token operator">*</span>sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> flag <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span> <span class="token operator">&amp;&amp;</span>                    sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 兄弟都为黑节点，需要找父母帮忙</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"R"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rotateLeft</span><span class="token punctuation">(</span>sib<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sib <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sib<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rotateRight</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> node <span class="token operator">=</span> flag<span class="token punctuation">;</span>    node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBT<span class="token operator">::</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>RBTNode <span class="token operator">*</span>RBT<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> value<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// go left</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// go right</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">fixAfterAdd</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">erase</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找后继节点</span>        RBTNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">findSuccessor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setValue</span><span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此时如果找到后继节点，则node一定不会有两棵子树 即没有左子树</span>    RBTNode <span class="token operator">*</span>replace <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>replace<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存在一颗子树</span>        replace<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> replace<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token function">fixAfterErase</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> node<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>root <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不存在子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token function">fixAfterErase</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> node<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">printNULL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[null]"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">'['</span> <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">','</span> <span class="token operator">&lt;&lt;</span> node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">']'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">preOrder</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        printNULL();</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">inOrder</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        printNULL();</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">postOrder</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        printNULL();</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>RBTNode <span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        printNULL();</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    RBTNode <span class="token operator">*</span>back <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RBTNode <span class="token operator">*</span>p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>back <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            back <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">collectNode</span><span class="token punctuation">(</span>RBTNode <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nodePool<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">collectNode</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">collectNode</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> RBT<span class="token operator">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>RBTNode<span class="token operator">*</span> item<span class="token operator">:</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>nodePool<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"del:"</span> <span class="token operator">&lt;&lt;</span> item<span class="token operator">-</span><span class="token operator">></span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> item<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/posts/5.Git%E5%91%BD%E4%BB%A4/"/>
      <url>/posts/5.Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-远程资源库（origin）"><a href="#1-远程资源库（origin）" class="headerlink" title="1. 远程资源库（origin）"></a>1. 远程资源库（origin）</h1><p>本地的代码修改、提交都是origin的工作副本。</p><p><code>git clone 远程资源库链接</code></p><h1 id="2-本地资源库"><a href="#2-本地资源库" class="headerlink" title="2. 本地资源库"></a>2. 本地资源库</h1><p>常用三连</p><p><code>git add . &amp;&amp; git commit -m “” &amp;&amp; git push</code> </p><pre class=" language-shell"><code class="language-shell">本地资源库维护三棵树（工作目录，缓存区stage，本地资源库HEAD）git add . 是把工作目录的修改暂存到缓存（stage）中，添加indexgit commit -m "" 把本次缓存中的修改提交到本地资源库，此时HEAD指向最近一次的提交git pull 之后自动合并解决冲突后再 git push 推送到远程资源库，同步功能</code></pre><pre class=" language-shell"><code class="language-shell"># 通用化# 暂存git add <fileName>git add *# 提交git commit -m ""# 推送git pushgit push origin <branchName>git remote add origin <server> # 如果没有克隆现有仓库，需要连接# 分支git checkout -b newBranchAndChange # 从此时的分支新建分支并且换过去git checkout newBranch 如果没有此新分支，# 从此时的分支新建。如果有，则切换过去git checkout -d branchName # 如果有此分支，则删除分支git push origin <branch> # 推送本地分支到远程资源库，如果不推送，尽本地自己可见# 更新与合并git pull # 更新并自动合并，如果有冲突，则需要手动处理，冲突解决后，git add <conflictFlieName>git pull = git fetch && git mergegit merge <branch> # 合并branch到当前分支git diff <source> <target> # 查看合并改动之前的差异# 标签 git tag <tagName> <commitID> # 给提交ID创建taggit log 查看提交记录# 回退git checkout -- <fileName> HEAD中的最新内容替换掉当前工作目录中的文件，缓存区无影响git fetch orgin && git reset --hard origin/master 丢弃本地改动与提交，拉取远程并将本地分支指向它git checkout --mixed ID/HEAD 撤销commit，撤销add，代码保留git checkout --soft ID/HEAD 撤销commit，不撤销add，代码保留git checkout --hard ID/HEAD 撤销commit，撤销add，代码删除，成为ID的commit状态# 改动保存git stash  将当前改动保存到工作区栈中git stash pop 将工作区栈保存的改动弹栈生效# 变基git checkout --rebase orgin/<branchName># 内建图形化git gitk# 彩色git输出 git config color.ui true# 取消跟踪git rm <fileName></code></pre><h1 id="3-git设置"><a href="#3-git设置" class="headerlink" title="3. git设置"></a>3. git设置</h1><p>全局设置用户目录下.gitconfig </p><pre class=" language-shell"><code class="language-shell">[user]    name = xq773939719    email = 773939719@qq.com[filter "lfs"]    clean = git-lfs clean -- %f    smudge = git-lfs smudge -- %f    process = git-lfs filter-process    required = true[core]    excludesfile = /Users/xq/.gitignore_global    autocrlf = input</code></pre><h1 id="4-SVN与Git"><a href="#4-SVN与Git" class="headerlink" title="4. SVN与Git"></a>4. SVN与Git</h1><blockquote><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p></blockquote><p><a href="https://www.bootcss.com/p/git-guide/">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络浅谈</title>
      <link href="/posts/4.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%B5%85%E8%B0%88/"/>
      <url>/posts/4.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%B5%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-HTTP-HTTPS"><a href="#1-HTTP-HTTPS" class="headerlink" title="1. HTTP HTTPS"></a>1. HTTP HTTPS</h1><h3 id="什么是HTTP-HTTPS？"><a href="#什么是HTTP-HTTPS？" class="headerlink" title="什么是HTTP HTTPS？"></a>什么是HTTP HTTPS？</h3><p>Hyper Text Transfer Protocal 超文本传输协议，是实现数据通信的基石</p><p>HTTP协议用于客户端和服务端之间的通信，通过请求和响应的交互达成通信（肯定是先从客户端开始建立通信的，服务器端在没有接收到任何请求之前不会发送响应）</p><p>HTTP是无状态的协议，为了实现期望的保存状态的功能，引入了Cookie技术</p><p>请求服务器的方法 <code>post get put head delete options trace connect</code></p><pre class=" language-markdown"><code class="language-markdown">GET 请求资源，服务器解析后返回数据，数据在URL可见，直接传输不安全，记得转码POST 传输实体数据，安全，数据在请求体里面× PUT 传输文件，鉴于HTTP／1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的网站不建议使用该方法。若配合Web应用程序的验证机制，或架构设计采用REST标准的同类Web网站，就可能会开放使用PUT方法。HEAD 同GET类似，只是为了获得报文首部，用于确认URL有效性以及更新日期× DELETE 和PUT一样不带验证OPTIONS 查询针对请求URL指定的资源支持的方法TRACE 追踪路径，客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改／篡改的。这是因为，想要连接到源目标服务器可能会通过代理中转，TRACE方法就是用来确认连接过程中发生的一系列操作。CONNECT  要求用隧道协议连接代理。CONNECT方法在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL和TLS协议把通信内容经网络隧道传输。</code></pre><p>无连接 无状态如何解决？</p><p>keep-alive 只要任意一端没有提出断开连接，则保持TCP连接。管线化，持久连接促进管线化，不必等待下一次请求，就可以发送多个响应。</p><p>cookie 通过在请求和响应报文中写入cookie信息来控制客户端状态。</p><p>返回结果的HTTP状态码</p><ul><li>1XX 表示服务器已经接收了客户端请求，客户端可继续发送请求</li><li>2XX 请求正常处理完毕</li><li>3XX 需要进行附加操作以完成请求</li><li>4XX 表示客户端的请求有非法内容</li><li>5XX 服务器处理请求出错</li></ul><p>通信数据转发程序：代理、网关、隧道</p><p>使用代理服务器的理由：利用缓存技术减少网络带宽的流量。代理有多种使用方法，按两种基准分类。一类是 <strong>是否使用缓存</strong> ，另一种是 <strong>是否会修改报文</strong>。</p><p>利用网关可以由HTTP请求转化为其他协议通信。</p><p>利用缓存可减少对源服务器的访问，可以节省通信流量和通信时间。<br>使用缓存的时候，要注意缓存的有效期限，确保我们发起请求获取的是最新的数据资源。</p><blockquote><p>HTTP 有以下不足：</p><ul><li>通信使用明文（不加密），内容可能会被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li><li>无法证明报文的完整性，所以有可能已遭篡改</li></ul><p>HTTP + 加密 + 认证 + 完整性 = HTTPS</p><p>HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL和TSL协议代替而已，通常，HTTP直接和TCP通信，当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。简言之，所谓HTTPS其实就是身披SSL协议这层外壳的HTTP。</p><p>当采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。而且SSL协议是独立于HTTP的协议，所以不光是HTTP协议，其他运行在应用层的SMTP和Telnet等协议均可配合SSL协议使用。可以说SSL是当今世界上应用最为广泛的网络安全技术。</p><p>在讲解SSL之前我们需要首先了解一下加密方法，加密分为对称加密和非对称加密。HTTPS协议则是采用的两者混合的实现方式，为什么要结合两种的实现方式呢？这是因为它们都各自存在自己的优缺点。对于对称加密来说，密钥的传输交换是不安全的，但是效率比较高，而对于非对称加密，是不用担心传输的密钥安全性的问题的，因为我们传递的是公开密钥，任何人都可以获得，但是缺点是效率比较低。对于公钥私钥、数字签名，这个哥们已经总结的相当好了，可以参考一下这篇<a href="http://www.cnblogs.com/f1194361820/archive/2015/01/29/4260025.html">文章</a>。</p></blockquote><h3 id="为什么需要加密"><a href="#为什么需要加密" class="headerlink" title="为什么需要加密"></a>为什么需要加密</h3><p>http内容是明文传输的，明文数据经过中间代理服务器、路由，如果信息在传输过程中被劫持，内容将会是完全暴露的，甚至可以篡改，这称为中间人攻击。</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>一段密钥代码，它可以解密原本的内容。</p><p>获取信息的一方持有这个密钥才能和解密获得信息。</p><h3 id="只有对称加密可行吗"><a href="#只有对称加密可行吗" class="headerlink" title="只有对称加密可行吗"></a>只有对称加密可行吗</h3><p>如果通信双方本来就持有密钥，安全性没问题，密钥怎么来的，肯定是浏览器发出请求，服务器响应，告诉双方“你用这个密钥解密”，这样就完全把密钥暴露在外，还是不安全的。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>公钥内容用私钥解，私钥内容用公钥解，耗时</p><h3 id="非对称与对称结合"><a href="#非对称与对称结合" class="headerlink" title="非对称与对称结合"></a>非对称与对称结合</h3><p>首先，服务器持有公钥A，私钥A，明文传送公钥A传送到客户端，客户端网站生成密钥a，使用服务器的公钥A加密密钥a发送报文到服务端，服务端接受报文并使用密钥A解密得到密钥a，这样的密钥a看似是安全的，双方可以使用密钥a加密解密。但是，如果明文传送的公钥A被中间人获取，并生成密钥α，使用公钥A加密α发送报文，这样双方都获得了α，使用α加密解密，中间人就使用α密钥攻击服务器了。</p><p>发生这种情况的原因是服务器收到返回的加密后的密钥a/α，它不知道是不是自己网站产生的密钥。</p><p>如何证明是客户端发送请求并且是客户端收到公钥并且是客户端生成密钥a使用公钥A加密后返回的？</p><ul><li><p>公信机构，提供证明，例如数字证书，服务器发送网站HTTPS信息前需要申请数字证书，证书存有持有者、持有者公钥、证书对应网址等信息，传数字证书给浏览器，标记此证书对应此网站，浏览器从证书取公钥就好了，不用明文传送公钥。</p></li><li><p>那证书万一被篡改呢？给证书加个防伪标志，数字签名：使用证书内容生成一份签名，比对证书内容和签名是否一致。</p></li><li><p>CA数字签名制作（因为公信机构CA拥有服务端公钥私钥，CA对证书明文信息hash，hash使用私钥加密，得到数字签名）。</p></li><li><p>证书明文和数字签名共同组成数字证书。颁发给网站。</p></li><li><p>那浏览器如何验证是不是此网站的证书？浏览器使用CA机构的公钥解密签名，并通过证书明文计算签名，对比是否相等，相等则验证成功。</p></li></ul><p>具体过程如下：获取颁发证书，校验证书是否是CA颁发，服务器响应请求</p><pre><code>                          CA机构→→2→→→证书明文与证书哈希后私钥加密                            ↑                   ↓                            ↑     (服务器有CA私钥)   ↓                            1           (取证书)        3(浏览器校验证书是否被替换)    某网站                                  ↓浏览器→→→→→HTTPS请求→→→→→→→→服务器←←←←←←4←←←←←←←带签名的证书(证书)←←←←←←←←←签名证书←←←←←← ↓ ↑  →用证书公钥加密客户端密钥→→→→ ↓ ↑ 使用私钥解密客户端密钥存储sessionID （建立了安全的连接）          5  6    每次使用客户端密钥加密发送信息← ↓ ↑                     (校验) →每次使用服务端公钥加密发送信息 ↓ ↑                                验证                               → &#123;用证书的公钥解密签名得到明文的哈希值&#125;                               → &#123;使用哈希函数处理证书明文得到哈希值&#125;                               → &#123;对比哈希值&#125;                               → 如果相等，安全，没有被篡改                               → 如果不等，证书被篡改       (请求与响应)</code></pre><p>加密解密的过程在分层网络模型中处于TCP之上的SSL/TSL层</p><h1 id="2-常见的字段是什么？"><a href="#2-常见的字段是什么？" class="headerlink" title="2. 常见的字段是什么？"></a>2. 常见的字段是什么？</h1><p>Host x.x.x 请求地址<br>content-length 响应数据长度<br>content-type 响应数据格式<br>content-encoding 数据压缩格式<br>connection 用于保持长连接<br>accept 声明接受的数据格式<br>accept-encoding 可接受的压缩格式</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/43789231">彻底搞懂HTTPS的加密机制</a></p><p><a href="http://www.akathink.com/2016/07/28/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82HTTP%E5%8D%8F%E8%AE%AE/">彻底搞懂HTTP协议</a></p><p><a href="https://liyucang-git.github.io/2019/01/02/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82HTTP%E5%92%8CHTTPS%E5%8D%8F%E8%AE%AE/">彻底搞懂HTTP和HTTPS协议</a></p><p><a href="https://www.cnblogs.com/chenqf/p/6386163.html">彻底弄懂HTTP缓存机制及原理</a></p><p><a href="https://www.cnblogs.com/f1194361820/p/4260025.html">Java Security：公钥私钥、数字签名、消息摘要是什么</a></p><p><a href="https://zhuanlan.zhihu.com/p/53329356">ssl/tls是什么？是怎么工作的？</a></p><h1 id="2-XSS-CSRF"><a href="#2-XSS-CSRF" class="headerlink" title="2. XSS CSRF"></a>2. XSS CSRF</h1><p>xss：用户过分信任网站，放任来自浏览器地址栏代表的那个网站代码在自己本地任意执行。如果没有浏览器的安全机制限制，xss代码可以在用户浏览器为所欲为；</p><p>csrf：网站过分信任用户，放任来自所谓通过访问控制机制的代表合法用户的请求执行网站的某个特定功能。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自我驱动</title>
      <link href="/posts/3.%E8%87%AA%E6%88%91%E9%A9%B1%E5%8A%A8/"/>
      <url>/posts/3.%E8%87%AA%E6%88%91%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-OC-内存管理"><a href="#1-OC-内存管理" class="headerlink" title="1. OC 内存管理"></a>1. OC 内存管理</h1><h2 id="1-堆-和-栈"><a href="#1-堆-和-栈" class="headerlink" title="1. 堆 和 栈"></a>1. 堆 和 栈</h2><p>栈：编译器与操作系统使用，自动释放，入参或者局部变量，先进后出，不会出现内存碎片。增长方式：向低地址</p><p>堆：程序员动态分配，非基本数据类型，程序结束是OS回收，但是分配的内存无用后不释放会产生内存泄漏。动态分配，会产生碎片。增长方式：向高地址。</p><h2 id="2-僵尸对象-空指针-野指针"><a href="#2-僵尸对象-空指针-野指针" class="headerlink" title="2. 僵尸对象 空指针 野指针"></a>2. 僵尸对象 空指针 野指针</h2><p>僵尸对象：已经被销毁的对象，内存区域无法再被使用。</p><p>空指针：指针无指向，默认nil（0）。给空指针发消息不会有任何反应。</p><p>野指针：指向僵尸对象，发消息会出现地址访问异常（EXC_BAD_ACCESS）错误。</p><h2 id="3-OC-内存管理"><a href="#3-OC-内存管理" class="headerlink" title="3. OC 内存管理"></a>3. OC 内存管理</h2><ul><li>分配内存：创建对象</li><li>释放内存：销毁对象</li></ul><p>内存管理范围：继承NSObject，非基本数据类型</p><p>内存管理方式三阶段：</p><p>①MRC 手动引用计数<br>对象引用计数为零才可以被销毁，除非程序退出<br>使用new alloc init copy MutableCopy 时，对象默认初试RC为1。</p><p>发送retain消息，表示持有对象，RC++。</p><p>发送release消息，表示不再拥有对象，RC–。</p><p>发送retainCount，表示检查RC值，但是（Apple在此处优化-1过程，当retainCount == 1时调用release，该对象一定会被销毁，就不必浪费资源-1为0）不准确，采用dealloc检测内存是否释放</p><p>发送dealloc，当一个对象RC为0，会被销毁。也可以验证dealloc是否被调用判断对象是否被销毁</p><p>一般重写dealloc方法，并且在方法最后调用父类dealloc，[super dealloc]。</p><p>谁创建谁是释放，谁持有谁释放，避免过度释放。</p><p>释放后指针成为野指针，记得置空。</p><p>@property参数 </p><p>生成setter方法</p><ul><li>retain：release旧值，retain新值（用于对象）</li><li>assign：直接赋值，不做内存管理（用于非对象）</li><li>copy：release旧值，copy新值（用于NSString不可变）</li></ul><p>控制生成set方法</p><ul><li>readwrite get+set</li><li>readonly get</li></ul><p>多线程</p><ul><li>atomic 默认</li><li>nonatomic 性能好</li></ul><p>循环引用：同时使用retain持有对象内存无法释放，解决办法是一个retain一个assign</p><p>②autoreleasepool 自动释放池</p><p>运行时，会创建无数个pool，为栈结构，对象调用autorelease时，会入栈。当pool被销毁时，对pool的对象发送release，如果RC 为0，则对象被销毁，不为0则不会被销毁。</p><p>③ARC 自动引用计数<br>自动引用计数，不允许使用release方法，重写dealloc不能调用父类dealloc。<br>ARC是编译器特性，不是其他语言的动态特性GC。</p><p>局部变量释放，对象随之释放。<br>清空指针，对象随之释放。（例如a = nil）<br>默认清空指针是strong的<br>不要使用weak保存新创建的对象</p><p>循环引用问题：一个strong一个weak</p><p>@property参数</p><p>strong ≈ retain<br>weak ≈ assign</p><h1 id="2-C-内存管理"><a href="#2-C-内存管理" class="headerlink" title="2. C++ 内存管理"></a>2. C++ 内存管理</h1><h2 id="1-内存分区"><a href="#1-内存分区" class="headerlink" title="1. 内存分区"></a>1. 内存分区</h2><p>①动态存储区：堆（new 对象初始化，delete清除，开发控制） 栈（局部变量，OS 编译器 控制）（分为动态与静态分配，编译器负责分配，动态alloc函数分配）</p><p>②静态区（static全局变量）c语言区分初始化与非初始化</p><p>③自由存储区（malloc分配的，free 清除）</p><p>④常量区（不变量）</p><p>⑤代码区</p><p>常见内存出错：</p><ul><li>内存分配未成功（记得检查指针不为空）</li><li>未初始化（最好赋零值，缺省初值不定）</li><li>越界（常见的数组边界）</li><li>内存泄漏（忘记销毁对象释放内存，new与delete成对出现）</li><li>野指针（释放了内存还在使用内存区域）</li></ul><p>strcpy 复制数组<br>strcmp 比较数组<br>复制arr内容，先malloc内存strlen(arr)区域，然后strcpy</p><p>参考了 <a href="https://chenqx.github.io/2014/09/25/Cpp-Memory-Management/">C/C++内存管理详解</a></p><h1 id="3-Java-内存管理"><a href="#3-Java-内存管理" class="headerlink" title="3. Java 内存管理"></a>3. Java 内存管理</h1><h2 id="1-内存分区-1"><a href="#1-内存分区-1" class="headerlink" title="1.内存分区"></a>1.内存分区</h2><p>①方法区：存放加载类的信息、类的静态变量、final变量、类的方法。全局共享，持久代。本区域的垃圾回收主要是常量池与已加载类的卸载。<br>运行时常量池：是方法区的部分，存储编译器生成的字面常量、符号引用、直接引用。<br>–XX：（PermSize/MaxPermSize）最大最小</p><p>②堆：GC机制重点关注区域，最大的一块内存区，所有线程共享。虚拟机启东市创建。用来存储对象实例与数组值。可以认为new创建的对象都在此处分配。</p><p>–Xms：JVM启动时申请的最小内存，默认1/64 &amp;&amp; &lt; 1G。</p><p>–Xmx：JVM可申请的最大内存，默认1/4 &amp;&amp; &lt; 1G。</p><p>为了内存回收高效，sun jdk 1.2开始才去分代的管理方式。（young old permanent）</p><p>年轻代按比例分为eden（复制回收） 和 survivor，回收年轻代内存称为minor gc</p><p>内存首先在年轻代分配对象，如果对象大，直接分配到老年代</p><p>老年代指经过多次垃圾回收仍然存活的对象，老年代内存回收称为major gc</p><p>③本地方法栈（多为c）</p><p>存储native方法，与虚拟机栈运行机制一致，虚拟机栈执行java方法。</p><p>④虚拟机栈（JVM栈）</p><p>占用操作系统内存，线程私有，类似于C++的栈，存储局部变量等</p><p>⑤PC</p><p>记录字节码执行位置，为线程行号指示器</p><h2 id="2-对象回收判定算法"><a href="#2-对象回收判定算法" class="headerlink" title="2. 对象回收判定算法"></a>2. 对象回收判定算法</h2><ul><li>引用计数<br>每个对象拥有一个引用计数器。普遍存在循环引用问题。</li><li>可达性分析<br>root对象作为起点，进行深度搜索，走过的路径称为引用链，当链不经过root时，表明从root到当前对象不可达，标记为可回收。java中可以作为root的对象有（虚拟机栈、native方法栈native方法引用的对象、方法区静态属性引用的对象、方法区常量引用的对象）<br>// TODO</li></ul><h2 id="3-垃圾收集算法"><a href="#3-垃圾收集算法" class="headerlink" title="3. 垃圾收集算法"></a>3. 垃圾收集算法</h2><ul><li><p>标记清除<br>原位置删除，容易产生碎片。标记清除效率不高。</p></li><li><p>复制<br>开辟一半区域，存活的对象复制到新区域。解决碎片，但是空间利用率减半。</p></li><li><p>标记整理<br>存活对象向一侧移动，清除掉端边界以外的内存。</p></li><li><p>分代收集<br>GC大都采用分代收集，新生代与老年代，新版本永久代废弃。引入元空间，直接使用物理内存。<br>新生代分三个区（eden survivor from survivor to）默认811。<br>优先使用eden 与 from，用满后，进行GC，（停止复制法）存活的copy到to并清除eden与from，如果to无法容纳，copy到老年代，再无法容纳，full gc。</p></li></ul><h2 id="4-收集器"><a href="#4-收集器" class="headerlink" title="4. 收集器"></a>4. 收集器</h2><ul><li><p>串行收集器</p></li><li><p>并行收集器</p></li><li><p>CMS（用于永久代）</p></li><li><p>G1收集器（并发 增量压缩 暂停时间段）</p></li></ul><h2 id="5-HotSpot虚拟机"><a href="#5-HotSpot虚拟机" class="headerlink" title="5. HotSpot虚拟机"></a>5. HotSpot虚拟机</h2><p>垃圾收集器是垃圾收集算法的实现。依据HotSpot虚拟机。</p><p>参考了<br><a href="https://blog.csdn.net/suifeng3051/article/details/48292193">JVM内存管理及GC机制</a><br><a href="https://zhuanlan.zhihu.com/p/38056939">JVM自动内存管理机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内存管理</title>
      <link href="/posts/2.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/posts/2.%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-OC-内存管理"><a href="#1-OC-内存管理" class="headerlink" title="1. OC 内存管理"></a>1. OC 内存管理</h1><h2 id="1-堆-和-栈"><a href="#1-堆-和-栈" class="headerlink" title="1. 堆 和 栈"></a>1. 堆 和 栈</h2><p>栈：编译器与操作系统使用，自动释放，入参或者局部变量，先进后出，不会出现内存碎片。增长方式：向低地址</p><p>堆：程序员动态分配，非基本数据类型，程序结束是OS回收，但是分配的内存无用后不释放会产生内存泄漏。动态分配，会产生碎片。增长方式：向高地址。</p><h2 id="2-僵尸对象-空指针-野指针"><a href="#2-僵尸对象-空指针-野指针" class="headerlink" title="2. 僵尸对象 空指针 野指针"></a>2. 僵尸对象 空指针 野指针</h2><p>僵尸对象：已经被销毁的对象，内存区域无法再被使用。</p><p>空指针：指针无指向，默认nil（0）。给空指针发消息不会有任何反应。</p><p>野指针：指向僵尸对象，发消息会出现地址访问异常（EXC_BAD_ACCESS）错误。</p><h2 id="3-OC-内存管理"><a href="#3-OC-内存管理" class="headerlink" title="3. OC 内存管理"></a>3. OC 内存管理</h2><ul><li>分配内存：创建对象</li><li>释放内存：销毁对象</li></ul><p>内存管理范围：继承NSObject，非基本数据类型</p><p>内存管理方式三阶段：</p><p>①MRC 手动引用计数<br>对象引用计数为零才可以被销毁，除非程序退出<br>使用new alloc init copy MutableCopy 时，对象默认初试RC为1。</p><p>发送retain消息，表示持有对象，RC++。</p><p>发送release消息，表示不再拥有对象，RC–。</p><p>发送retainCount，表示检查RC值，但是（Apple在此处优化-1过程，当retainCount == 1时调用release，该对象一定会被销毁，就不必浪费资源-1为0）不准确，采用dealloc检测内存是否释放</p><p>发送dealloc，当一个对象RC为0，会被销毁。也可以验证dealloc是否被调用判断对象是否被销毁</p><p>一般重写dealloc方法，并且在方法最后调用父类dealloc，[super dealloc]。</p><p>谁创建谁是释放，谁持有谁释放，避免过度释放。</p><p>释放后指针成为野指针，记得置空。</p><p>@property参数 </p><p>生成setter方法</p><ul><li>retain：release旧值，retain新值（用于对象）</li><li>assign：直接赋值，不做内存管理（用于非对象）</li><li>copy：release旧值，copy新值（用于NSString不可变）</li></ul><p>控制生成set方法</p><ul><li>readwrite get+set</li><li>readonly get</li></ul><p>多线程</p><ul><li>atomic 默认</li><li>nonatomic 性能好</li></ul><p>循环引用：同时使用retain持有对象内存无法释放，解决办法是一个retain一个assign</p><p>②autoreleasepool 自动释放池</p><p>运行时，会创建无数个pool，为栈结构，对象调用autorelease时，会入栈。当pool被销毁时，对pool的对象发送release，如果RC 为0，则对象被销毁，不为0则不会被销毁。</p><p>③ARC 自动引用计数<br>自动引用计数，不允许使用release方法，重写dealloc不能调用父类dealloc。<br>ARC是编译器特性，不是其他语言的动态特性GC。</p><p>局部变量释放，对象随之释放。<br>清空指针，对象随之释放。（例如a = nil）<br>默认清空指针是strong的<br>不要使用weak保存新创建的对象</p><p>循环引用问题：一个strong一个weak</p><p>@property参数</p><p>strong ≈ retain<br>weak ≈ assign</p><h1 id="2-C-内存管理"><a href="#2-C-内存管理" class="headerlink" title="2. C++ 内存管理"></a>2. C++ 内存管理</h1><h2 id="1-内存分区"><a href="#1-内存分区" class="headerlink" title="1. 内存分区"></a>1. 内存分区</h2><p>①动态存储区：堆（new 对象初始化，delete清除，开发控制） 栈（局部变量，OS 编译器 控制）（分为动态与静态分配，编译器负责分配，动态alloc函数分配）</p><p>②静态区（static全局变量）c语言区分初始化与非初始化</p><p>③自由存储区（malloc分配的，free 清除）</p><p>④常量区（不变量）</p><p>⑤代码区</p><p>常见内存出错：</p><ul><li>内存分配未成功（记得检查指针不为空）</li><li>未初始化（最好赋零值，缺省初值不定）</li><li>越界（常见的数组边界）</li><li>内存泄漏（忘记销毁对象释放内存，new与delete成对出现）</li><li>野指针（释放了内存还在使用内存区域）</li></ul><p>strcpy 复制数组<br>strcmp 比较数组<br>复制arr内容，先malloc内存strlen(arr)区域，然后strcpy</p><p>参考了 <a href="https://chenqx.github.io/2014/09/25/Cpp-Memory-Management/">C/C++内存管理详解</a></p><h1 id="3-Java-内存管理"><a href="#3-Java-内存管理" class="headerlink" title="3. Java 内存管理"></a>3. Java 内存管理</h1><h2 id="1-内存分区-1"><a href="#1-内存分区-1" class="headerlink" title="1.内存分区"></a>1.内存分区</h2><p>①方法区：存放加载类的信息、类的静态变量、final变量、类的方法。全局共享，持久代。本区域的垃圾回收主要是常量池与已加载类的卸载。<br>运行时常量池：是方法区的部分，存储编译器生成的字面常量、符号引用、直接引用。<br>–XX：（PermSize/MaxPermSize）最大最小</p><p>②堆：GC机制重点关注区域，最大的一块内存区，所有线程共享。虚拟机启东市创建。用来存储对象实例与数组值。可以认为new创建的对象都在此处分配。</p><p>–Xms：JVM启动时申请的最小内存，默认1/64 &amp;&amp; &lt; 1G。</p><p>–Xmx：JVM可申请的最大内存，默认1/4 &amp;&amp; &lt; 1G。</p><p>为了内存回收高效，sun jdk 1.2开始才去分代的管理方式。（young old permanent）</p><p>年轻代按比例分为eden（复制回收） 和 survivor，回收年轻代内存称为minor gc</p><p>内存首先在年轻代分配对象，如果对象大，直接分配到老年代</p><p>老年代指经过多次垃圾回收仍然存活的对象，老年代内存回收称为major gc</p><p>③本地方法栈（多为c）</p><p>存储native方法，与虚拟机栈运行机制一致，虚拟机栈执行java方法。</p><p>④虚拟机栈（JVM栈）</p><p>占用操作系统内存，线程私有，类似于C++的栈，存储局部变量等</p><p>⑤PC</p><p>记录字节码执行位置，为线程行号指示器</p><h2 id="2-对象回收判定算法"><a href="#2-对象回收判定算法" class="headerlink" title="2. 对象回收判定算法"></a>2. 对象回收判定算法</h2><ul><li>引用计数<br>每个对象拥有一个引用计数器。普遍存在循环引用问题。</li><li>可达性分析<br>root对象作为起点，进行深度搜索，走过的路径称为引用链，当链不经过root时，表明从root到当前对象不可达，标记为可回收。java中可以作为root的对象有（虚拟机栈、native方法栈native方法引用的对象、方法区静态属性引用的对象、方法区常量引用的对象）<br>// TODO</li></ul><h2 id="3-垃圾收集算法"><a href="#3-垃圾收集算法" class="headerlink" title="3. 垃圾收集算法"></a>3. 垃圾收集算法</h2><ul><li><p>标记清除<br>原位置删除，容易产生碎片。标记清除效率不高。</p></li><li><p>复制<br>开辟一半区域，存活的对象复制到新区域。解决碎片，但是空间利用率减半。</p></li><li><p>标记整理<br>存活对象向一侧移动，清除掉端边界以外的内存。</p></li><li><p>分代收集<br>GC大都采用分代收集，新生代与老年代，新版本永久代废弃。引入元空间，直接使用物理内存。<br>新生代分三个区（eden survivor from survivor to）默认811。<br>优先使用eden 与 from，用满后，进行GC，（停止复制法）存活的copy到to并清除eden与from，如果to无法容纳，copy到老年代，再无法容纳，full gc。</p></li></ul><h2 id="4-收集器"><a href="#4-收集器" class="headerlink" title="4. 收集器"></a>4. 收集器</h2><ul><li><p>串行收集器</p></li><li><p>并行收集器</p></li><li><p>CMS（用于永久代）</p></li><li><p>G1收集器（并发 增量压缩 暂停时间段）</p></li></ul><h2 id="5-HotSpot虚拟机"><a href="#5-HotSpot虚拟机" class="headerlink" title="5. HotSpot虚拟机"></a>5. HotSpot虚拟机</h2><p>垃圾收集器是垃圾收集算法的实现。依据HotSpot虚拟机。</p><p>参考了<br><a href="https://blog.csdn.net/suifeng3051/article/details/48292193">JVM内存管理及GC机制</a><br><a href="https://zhuanlan.zhihu.com/p/38056939">JVM自动内存管理机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++学习的四个层次</title>
      <link href="/posts/1.C++%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1/"/>
      <url>/posts/1.C++%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%B1%82%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一层次，C++基础：挑选一本入门书籍，如《C++ Primer》、《C++大学教程》、或Stroustrup撰写的经典《C++程序设计语言》或他力作《C++程序设计原理与实践》，而一般C++课程也止于此，另外《C++ 标准程序库》及《The C++ Standard Library Extensions》可供参考</p><p>第二层次，正确高效地使用C++：此层次开始必须自修，阅读过《(More)Effective C++》、《(More)Exceptional C++》、《Effective STL》及《C++编程规范》等，才适宜踏入专业C++开发之路</p><p>第三层次，深入了解C++：关于全局问题可读《深入探索C++对象模型》、《Imperfect C++》、《C++沉思录》、《STL源码剖析》，要挑战智商，可看关于模版及模版元编程的书籍如《C++ Templates》、《C++设计新思维》、《C++模版元编程》</p><p>第四层次，研究C++：阅读《C++语言的设计和演化》、《编程的本质》(含STL设计背后的数学根基)、C++标准文件《ISO/IEC 14882:2003》、C++标准委员会的提案书和报告书、关于C++的学术文献</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
